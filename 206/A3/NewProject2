#!/bin/bash

# Camilo Garcia La Rotta
# ID 260657037
# COMP 206 A2

### PART 1

# global variable declarations
file_path=""
file_name=""

# validate number of arguments
if [[ "$#" -lt 1 ]]; then
  echo "Project name is missing. Type in: NewProject path project_name"
  exit 1
elif [[ "$#" -eq 1 ]]; then 
  # path is cwd
  file_path="./"
  file_name=$1

  #shift to ensure only c source files are left as args
  shift
elif [[ "$#" -ge 2 ]]; then
  if [[ -d "$1" ]]; then
    # path is correct, assign file path and name
    file_path=$1
    file_name=$2
    
    # shift to ensure only c source files are left as args
    shift
    shift
  else
    # first argument wasn't a directory, then it is implied path is cwd
    # and all but the first argument are c files
    file_path="./"
    file_name=$1

    #shift to ensure only c source files are left as args
    shift
  fi
fi

# create best practice directory structure
mkdir -p ${file_path}/${file_name}/{"docs","source","backup","archive"}


### PART 2

cat << 'EOF' >> ${file_path}/${file_name}/source/compile
#!/bin/bash

# this script was generated from inside Newproject

output_name=""

# parse option flags

while getopts 'o:' flag; do
  case "${flag}" in
    o) # outputa name flag found
      output_name=$2
      shift
      shift
      ;;
    *) 
      echo "Unexpected flag ${flag}"
      exit 1
      ;;
  esac
done

# verify if any c files where given as argument
test "$#" -gt 0 || (echo "You are missing file names. Type in: compile -o executable_name file_name(s)"; exit 1)

# compile
cp "$@" ../backup
  
if [[ -n $output_name ]]; then
  gcc -o $output_name $@ 2> errors
else
  gcc $@ 2> errors
fi

more errors

exit 0
EOF

chmod +x ${file_path}/${file_name}/source/compile 

### A3Q3 Makefile

# only create Makefile if c files were given in CL 
if [[ "$#" -gt 0 ]];then
  
  # create string of .o dependencies for the main target
  mainDependencies=""
  for dep in "$@";do
    mainDependencies="$mainDependencies ${dep//.c/.o}"
  done

  mainTarget="${1%%.c}: $mainDependencies\n\t"
  mainTarget="${mainTarget}gcc $mainDependencies -o ${1%%.c}"

  echo -e "$mainTarget" > ${file_path}/${file_name}/source/Makefile

  # create string of dependencies for all other files
  secondaryTargets=""
  for dep in "$@";do
    secondaryTargets="$secondaryTargets\n${dep//.c/.o}: $dep\n\t"
    secondaryTargets="${secondaryTargets}gcc -c $dep\n"
  done

  echo -e $secondaryTargets >> ${file_path}/${file_name}/source/Makefile
fi

exit 0















exit 0



